<div class="white container-fluid py-5">
    <div class="container">
		<h1>Prototipos y objetos Prolog</h1>
		<p>En esta página se describen los prototipos implementados para modelar los elementos de Prolog y sus métodos disponibles.</p>
	</div>
</div>

<div class="white container-fluid py-5">
    <div class="container">
		<h2 id="variables"><a href="#variables">Variables</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Var</span> se utiliza para representar las variables lógicas de los programas Prolog. El constructor recibe como argumento una cadena de carácteres que representa el identificador de la variable.</p>

		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var, this);"><b>pl.type.Var</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.toString, this);">pl.type.Var.prototype.<b>toString()</b></a> - Devuelve una representación textual del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.clone, this);">pl.type.Var.prototype.<b>clone()</b></a> - Devuelve una copia del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.compare, this);">pl.type.Var.prototype.<b>compare(object)</b></a> - Compara el objeto con otro objeto. Devuelve <span class="inline-code">-1</span> si es menor, <span class="inline-code">1</span> si es mayor o <span class="inline-code">0</span> si es igual. Este método se utiliza únicamente para comparar variables con variables. Los objetos de Prolog tienen una relación de orden definida, para comparar cualquier par de objetos Prolog entre sí existe la función <span class="inline-code">pl.compare</span>.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.rename, this);">pl.type.Var.prototype.<b>rename(thread)</b></a> - Renombra el objeto. Devuelve una variable fresca para el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.variables, this);">pl.type.Var.prototype.<b>variables()</b></a> - Devuelve la lista de variables contenidas en el objeto. Devuelve una lista unitaria con el identificador de la variable.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.apply, this);">pl.type.Var.prototype.<b>apply(substitution)</b></a> - Aplica una substitución al objeto. Devuelve el valor por el que cambia dicha variable según la substitución, o la propia variable si no existe en la substitución.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.unify, this);">pl.type.Var.prototype.<b>unify(object, occurs_check)</b></a> - Devuelve un estado resultante de unificar los dos objetos. Devuelve <span class="inline-code">null</span> si la unificación falla. El segundo argumento especifica si se debe comprobar la ocurrencia de variables o no.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.interpret, this);">pl.type.Var.prototype.<b>interpret(thread)</b></a> - Devuelve el resultado de evaluar aritméticamente el objeto. En el caso de una variable, lanza un error de instanciación en el hilo <span class="inline-code">thread</span>.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.compile, this);">pl.type.Var.prototype.<b>compile()</b></a> - Devuelve una cadena de caracteres representando el código JavaScript necesario para generar el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.equals, this);">pl.type.Var.prototype.<b>equals(obj)</b></a> - Comprueba si la variable es igual al objeto <span class="inline-code">obj</span> comparando todos los atributos internos de ambos objetos.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Var.prototype.toJavaScript, this);">pl.type.Var.prototype.<b>toJavaScript()</b></a> - Devuelve el objeto Prolog como un objeto JavaScript. En el caso de una variable, no es posible la conversión y se devuelve el valor <span class="inline-code">undefined</span>.</li>
		</ul>
		
		<h2 id="terminos" class="mt-5"><a href="#terminos">Términos</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Term</span> se utiliza para representar los átomos y términos compuestos de los programas Prolog. El constructor recibe como argumentos una cadena de carácteres que representa el identificador del término y, opcionalmente, una lista de objetos Prolog que representan los parámetros del término (si es compuesto).</p>
		<p>Las listas están compuestas por términos <span class="inline-code">./2</span> que reciben una cabeza y una cola, y por el término <span class="inline-code">[]/0</span> que se utiliza como lista vacía. Por ejemplo, la lista <span class="inline-code">[1,2,3]</span> es analizada como <span class="inline-code">'.'(1,'.'(2,'.'(3,[])))</span>.</p>
		
		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term, this);"><b>pl.type.Term</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.toString, this);">pl.type.Term.prototype.<b>toString()</b></a> - Devuelve una representación textual del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.clone, this);">pl.type.Term.prototype.<b>clone()</b></a> - Devuelve una copia del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.compare, this);">pl.type.Term.prototype.<b>compare(object)</b></a> - Compara el objeto con otro objeto. Devuelve <span class="inline-code">-1</span> si es menor, <span class="inline-code">1</span> si es mayor o <span class="inline-code">0</span> si es igual. Este método se utiliza únicamente para comparar términos con términos. Los objetos de Prolog tienen una relación de orden definida, para comparar cualquier par de objetos Prolog entre sí existe la función <span class="inline-code">pl.compare</span>.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.rename, this);">pl.type.Term.prototype.<b>rename(thread)</b></a> - Renombra el objeto. Devuelve un término con variables frescas para el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.variables, this);">pl.type.Term.prototype.<b>variables()</b></a> - Devuelve la lista de variables contenidas en el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.apply, this);">pl.type.Term.prototype.<b>apply(substitution)</b></a> - Aplica una substitución al objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.unify, this);">pl.type.Term.prototype.<b>unify(object, occurs_check)</b></a> - Devuelve un estado resultante de unificar los dos objetos. Devuelve <span class="inline-code">null</span> si la unificación falla. El segundo argumento especifica si se debe comprobar la ocurrencia de variables o no.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.select, this);">pl.type.Term.prototype.<b>select()</b></a> - Devuelve el primer átomo por la izquierda del término.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.replace, this);">pl.type.Term.prototype.<b>replace(object)</b></a> - Reemplaza el primer átomo por la izquierda del término por el objeto pasado como argumento. Si el argumento es <span class="inline-code">null</span>, elimina el átomo en lugar de reemplazarlo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.search, this);">pl.type.Term.prototype.<b>search(object)</b></a> - Comprueba si el átomo pasado como argumento está contenido en el término.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.interpret, this);">pl.type.Term.prototype.<b>interpret(thread)</b></a> - Devuelve el resultado de evaluar aritméticamente el objeto. En el caso de un término (que representa un functor evaluable), devuelve el resultado de la operación. Puede lanzar un error de interpretación en el hilo <span class="inline-code">thread</span> (debido a tipos incorrectos de los argumentos, división entre cero, etcétera).</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.compile, this);">pl.type.Term.prototype.<b>compile()</b></a> - Devuelve una cadena de caracteres representando el código JavaScript necesario para generar el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.equals, this);">pl.type.Term.prototype.<b>equals(obj)</b></a> - Comprueba si el término es igual al objeto <span class="inline-code">obj</span> comparando todos los atributos internos de ambos objetos.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Term.prototype.toJavaScript, this);">pl.type.Term.prototype.<b>toJavaScript()</b></a> - Devuelve el objeto Prolog como un objeto JavaScript. En el caso de un término: si es una lista bien formada se devuelve un array de JavaScript; si el término es atómico, se devuelve una cadena de caracteres con su identificador; en cualquier otro caso, devuelve el valor <span class="inline-code">undefined</span>.</li>
		</ul>
		
		<h2 id="numeros" class="mt-5"><a href="#numeros">Números</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Num</span> se utiliza para representar los números de los programas Prolog. El constructor recibe como argumentos un número que representa el valor y, opcionalmente, un valor lógico que indica si se trata de un valor real (<span class="inline-code">true</span>) o entero (<span class="inline-code">false</span>).</p>
		<p>Los números enteros están limitados al mayor entero que JavaScript puede representar con seguridad, <span class="inline-code">2<sup>53</sup> - 1</span> = <span class="inline-code">9007199254740991</span> <span class="manual-annotation">(véase <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank">[Number.MAX_SAFE_INTEGER]</a> de JavaScript)</span>. Cualquier operación que exceda este valor devolverá un error de evaluación por desbordamiento.</p>
		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num, this);"><b>pl.type.Num</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.toString, this);">pl.type.Num.prototype.<b>toString()</b></a> - Devuelve una representación textual del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.clone, this);">pl.type.Num.prototype.<b>clone()</b></a> - Devuelve una copia del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.compare, this);">pl.type.Num.prototype.<b>compare(object)</b></a> - Compara el objeto con otro objeto. Devuelve <span class="inline-code">-1</span> si es menor, <span class="inline-code">1</span> si es mayor o <span class="inline-code">0</span> si es igual. Este método se utiliza únicamente para comparar números con números. Los objetos de Prolog tienen una relación de orden definida, para comparar cualquier par de objetos Prolog entre sí existe la función <span class="inline-code">pl.compare</span>.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.rename, this);">pl.type.Num.prototype.<b>rename(thread)</b></a> - Renombra el objeto. Devuelve el mismo objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.variables, this);">pl.type.Num.prototype.<b>variables()</b></a> - Devuelve la lista de variables contenidas en el objeto. Devuelve una lista vacía.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.apply, this);">pl.type.Num.prototype.<b>apply(substitution)</b></a> - Aplica una substitución al objeto. Devuelve el mismo objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.unify, this);">pl.type.Num.prototype.<b>unify(object, occurs_check)</b></a> - Devuelve un estado resultante de unificar los dos objetos. Devuelve <span class="inline-code">null</span> si la unificación falla. El segundo argumento especifica si se debe comprobar la ocurrencia de variables o no.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.interpret, this);">pl.type.Num.prototype.<b>interpret(thread)</b></a> - Devuelve el resultado de evaluar aritméticamente el objeto. En el caso de un número, devuelve el propio objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.compile, this);">pl.type.Num.prototype.<b>compile()</b></a> - Devuelve una cadena de caracteres representando el código JavaScript necesario para generar el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.equals, this);">pl.type.Num.prototype.<b>equals(obj)</b></a> - Comprueba si el número es igual al objeto <span class="inline-code">obj</span> comparando todos los atributos internos de ambos objetos.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Num.prototype.toJavaScript, this);">pl.type.Num.prototype.<b>toJavaScript()</b></a> - Devuelve el objeto Prolog como un objeto JavaScript. En el caso de un número, devuelve un entero o un flotante con su valor.</li>
		</ul>
		
		<h2 id="substituciones" class="mt-5"><a href="#substituciones">Substituciones</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Substitution</span> se utiliza para representar las substituciones en el proceso de resolución, así como respuesta a los programas Prolog. El constructor recibe como argumento, opcionalmente, un objeto JavaScript que relaciona variables con objetos. Por ejemplo, <span class="inline-code">new pl.type.Substitution({"X":new pl.type.Term("a"), "Y":new.pl.type.Num(2)});</span> es una substitución donde la variable <span class="inline-code">X</span> cambia por <span class="inline-code">a</span> y la variable <span class="inline-code">Y</span> cambia por <span class="inline-code">2</span>.</p>
		
		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution, this);"><b>pl.type.Substitution</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.toString, this);">pl.type.Substitution.prototype.<b>toString()</b></a> - Devuelve una representación textual del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.clone, this);">pl.type.Substitution.prototype.<b>clone()</b></a> - Devuelve una copia del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.apply, this);">pl.type.Substitution.prototype.<b>apply(substitution)</b></a> - Aplica una substitución al objeto. Devuelve la composición de ambas substituciones.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.lookup, this);">pl.type.Substitution.prototype.<b>lookup(variable)</b></a> - Devuelve el valor de una variable. Devuelve <span class="inline-code">null</span> si la variable no existe en la substitución.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.filter, this);">pl.type.Substitution.prototype.<b>filter(function)</b></a> - Devuelve una nueva substitución filtrada con la función pasada como argumento.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.exclude, this);">pl.type.Substitution.prototype.<b>exclude(variables)</b></a> - Devuelve una nueva substitución excluyendo las variables indicadas.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.add, this);">pl.type.Substitution.prototype.<b>add(variable, value)</b></a> - Añade una nueva variable a la substitución.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.equals, this);">pl.type.Substitution.prototype.<b>equals(obj)</b></a> - Comprueba si la substitución es igual al objeto <span class="inline-code">obj</span> comparando todos los atributos internos de ambos objetos.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Substitution.prototype.domain, this);">pl.type.Substitution.prototype.<b>domain(plain)</b></a> - Devuelve el dominio de la substitución como un array de variables. Si <span class="inline-code">plain</span> es <span class="inline-code">true</span>, las variables se devuelven como un array de cadenas de caracteres con los identificadores de las variables. En cualquier otro caso, devuelve un array de variablesd de la clase <span class="inline-code">pl.type.Var</span>.</li>
		</ul>
		
		<h2 id="estados" class="mt-5"><a href="#estados">Estados</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.State</span> se utiliza para representar los puntos de elección en el proceso de resolución. El constructor recibe como argumentos un objetivo (un término Prolog) y una substitución. Cuando se llega a la cláusula vacía, el objetivo se representa con el valor <span class="inline-code">null</span>.</p>
		
		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.State, this);"><b>pl.type.State</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.State.prototype.toString, this);">pl.type.State.prototype.<b>toString()</b></a> - Devuelve una representación textual del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.State.prototype.clone, this);">pl.type.State.prototype.<b>clone()</b></a> - Devuelve una copia del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.State.prototype.equals, this);">pl.type.State.prototype.<b>equals(obj)</b></a> - Comprueba si la substitución es igual al objeto <span class="inline-code">obj</span> comparando todos los atributos internos de ambos objetos.</li>
		</ul>
		
		<h2 id="reglas" class="mt-5"><a href="#reglas">Reglas</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Rule</span> se utiliza para representar las reglas de los programas Prolog. El constructor recibe como argumentos la cabeza y el cuerpo de la regla. Si la regla es un hecho, el cuerpo vacío se representa con el valor <span class="inline-code">null</span>.</p>

		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule, this);"><b>pl.type.Rule</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.toString, this);">pl.type.Rule.prototype.<b>toString()</b></a> - Devuelve una representación textual del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.clone, this);">pl.type.Rule.prototype.<b>clone()</b></a> - Devuelve una copia del objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.rename, this);">pl.type.Rule.prototype.<b>rename(thread)</b></a> - Renombra el objeto. Devuelve la regla con variables frescas para el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.variables, this);">pl.type.Rule.prototype.<b>variables()</b></a> - Devuelve la lista de variables contenidas en el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.apply, this);">pl.type.Rule.prototype.<b>apply(substitution)</b></a> - Aplica una substitución al objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.compile, this);">pl.type.Rule.prototype.<b>compile()</b></a> - Devuelve una cadena de caracteres representando el código JavaScript necesario para generar el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Rule.prototype.equals, this);">pl.type.Rule.prototype.<b>equals(obj)</b></a> - Comprueba si la regla es igual al objeto <span class="inline-code">obj</span> comparando todos los atributos internos de ambos objetos.</li>
		</ul>
		
		<h2 id="sesiones" class="mt-5"><a href="#sesiones">Sesiones</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Session</span> se utiliza para representar las sesiones. El constructor recibe como argumento un entero que representa el límite de pasos de resolución que se pueden dar antes de encontrar una respuesta.</p>
		<p class="manual-warning"><b>Nota</b>: Para crear una nueva sesión se provee del método <span class="inline-code">pl.create</span>, no se recomienda utilizar el prototipo directamente <span class="manual-annotation">(véase <a href="http://tau-prolog.org/manual/es/un-tutorial-sencillo#sesiones">[Un tutorial sencillo] #Sesiones</a> del manual de Tau Prolog)</a></span>.</p>
		
		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session, this);"><b>pl.type.Session</b></a></li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.add_rule, this);">pl.type.Session.prototype.<b>add_rule(rule)</b></a> - Añade la regla a la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.run_directive, this);">pl.type.Session.prototype.<b>run_directive(directive)</b></a> - Ejecuta una directiva en el hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.throw_warning, this);">pl.type.Session.prototype.<b>throw_warning(warning)</b></a> - Lanza un aviso en el hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.add_goal, this);">pl.type.Session.prototype.<b>add_goal(goal)</b></a> - Añade el objetivo al hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.consult, this);">pl.type.Session.prototype.<b>consult(program)</b></a> - Analiza el progama <span class="inline-code">program</span> y añade las reglas a la sesión. Devuelve <span class="inline-code">true</span> si no se ha producido ningún error.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.query, this);">pl.type.Session.prototype.<b>query(goal)</b></a> - Analiza y añade la consulta <span class="inline-code">goal</span> al hilo por defecto de la sesión. Devuelve <span class="inline-code">true</span> si no se ha producido ningún error.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.get_free_variable, this);">pl.type.Session.prototype.<b>get_free_variable(variable)</b></a> - Devuelve la variable fresca de una variable del hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.next_free_variable, this);">pl.type.Session.prototype.<b>next_free_variable()</b></a> - Devuelve la siguiente variable fresca libre del hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.is_public_predicate, this);">pl.type.Session.prototype.<b>is_public_predicate(indicator)</b></a> - Comprueba si un predicado es público en la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.prepend, this);">pl.type.Session.prototype.<b>prepend(states)</b></a> - Inserta al principio de la pila de puntos de elección del hilo por defecto de la sesión una lista de estados.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.success, this);">pl.type.Session.prototype.<b>success(point)</b></a> - Añade al principio de la pila de puntos de elección del hilo por defecto de la sesión el punto donde el átomo seleccionado es eliminado.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.throw_error, this);">pl.type.Session.prototype.<b>throw_error(error)</b></a> - Lanza un error en el hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.step, this);">pl.type.Session.prototype.<b>step()</b></a> - Ejecuta un paso de resolución en el hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.answer, this);">pl.type.Session.prototype.<b>answer(callback)</b></a> - Busca una respuesta en el hilo por defecto de la sesión. Ejecuta el callback con la respuesta encontrada. Si se supera el número de pasos de resolución permitidos, ejecuta el callback con el valor <span class="inline-code">null</span>. Si no se encuentra ninguna respuesta, ejecuta el callback con el valor <span class="inline-code">false</span>.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.answers, this);">pl.type.Session.prototype.<b>answers(callback, max)</b></a> - Busca todas las respuestas en el hilo por defecto de la sesión (hasta un máximo).</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.again, this);">pl.type.Session.prototype.<b>again()</b></a> - Sigue buscando una respuesta en el hilo por defecto de la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.compile, this);">pl.type.Session.prototype.<b>compile()</b></a> - Devuelve una cadena de caracteres representando el código JavaScript necesario para generar el objeto.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.get_char_conversion, this);">pl.type.Session.prototype.<b>get_char_conversion(char)</b></a> - Devuelve el carácter correspondiente al carácter <span class="inline-code">char</span> establecido por la directiva <span class="inline-code">char_conversion</span> en la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.get_flag, this);">pl.type.Session.prototype.<b>get_flag(flag)</b></a> - Devuelve el valor del flag <span class="inline-code">flag</span> en la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.parse, this);">pl.type.Session.prototype.<b>parse(string)</b></a> - Analiza la cadena de caracteres <span class="inline-code">string</span> y devuelve un objeto con la expresión analizada <span class="inline-code">expr</span> y los tokens <span class="inline-code">tokens</span> generados durante el análisis léxico.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.step_rule, this);">pl.type.Session.prototype.<b>step_rule(module, atom)</b></a> - Si <span class="inline-code">module</span> es distinto de <span class="inline-code">null</span>, devuelve las cláusulas del predicado exportado por el módulo <span class="inline-code">module</span> especificado por el indicador del átomo <span class="inline-code">atom</span>. Si <span class="inline-code">module</span> es <span class="inline-code">null</span>, busca en los predicados definidos por el usuario, y en cada uno de los módulo importados hasta encontrar uno que lo defina, y devuelve sus cláusulas.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.__get_max_priority, this);">pl.type.Session.prototype.<b>__get_max_priority()</b></a> - Devuelve la prioridad máxima de un operador en la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.__get_next_priority, this);">pl.type.Session.prototype.<b>__get_next_priority(priority)</b></a> - Devuelve la mayor prioridad menor a <span class="inline-code">priority</span> que tiene algún operador en la sesión.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Session.prototype.__lookup_operator_classes, this);">pl.type.Session.prototype.<b>__lookup_operator_classes(priority, op)</b></a> - Devuelve la clase del operador <span class="inline-code">op</span> en el nivel de prioridad <span class="inline-code">priority</span> en la sesión (<span class="inline-code">xfx</span>, <span class="inline-code">xfy</span>, <span class="inline-code">yfx</span>, <span class="inline-code">fy</span>, etcétera). Si el operador no existe en ese nivel de prioridad, devuelve <span class="inline-code">false</span>.</li>
		</ul>
		
		<h2 id="hilos" class="mt-5"><a href="#hilos">Hilos</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Thread</span> se utiliza para representar hilos de ejecución en las sesiones. El constructor recibe como argumento la sesión a la que pertenece. Cuando se crea una nueva sesión, esta crea uno hilo de ejecución por defecto en la misma. Los hilos de la misma sesión comparten cierta información, como las reglas analizadas o la tabla de operadores, pero otra información, como los objetivos o puntos de elección son independientes entre ellos.</p>

		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread, this);"><b>pl.type.Thread</b></a></li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.add_rule, this);">pl.type.Thread.prototype.<b>add_rule(rule)</b></a> - Añade la regla en la sesión a la que pertence el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.run_directive, this);">pl.type.Thread.prototype.<b>run_directive(directive)</b></a> - Ejecuta una directiva en el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.throw_warning, this);">pl.type.Thread.prototype.<b>throw_warning(warning)</b></a> - Lanza un aviso en el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.add_goal, this);">pl.type.Thread.prototype.<b>add_goal(goal)</b></a> - Añade el objetivo al hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.consult, this);">pl.type.Thread.prototype.<b>consult(program)</b></a> - Analiza el progama <span class="inline-code">program</span> y añade las reglas a la sesión del hilo. Devuelve <span class="inline-code">true</span> si no se ha producido ningún error.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.query, this);">pl.type.Thread.prototype.<b>query(goal)</b></a> - Analiza y añade la consulta <span class="inline-code">goal</span> al hilo. Devuelve <span class="inline-code">true</span> si no se ha producido ningún error.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.get_free_variable, this);">pl.type.Thread.prototype.<b>get_free_variable(variable)</b></a> - Devuelve la variable fresca de una variable del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.next_free_variable, this);">pl.type.Thread.prototype.<b>next_free_variable()</b></a> - Devuelve la siguiente variable fresca libre del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.is_public_predicate, this);">pl.type.Thread.prototype.<b>is_public_predicate(indicator)</b></a> - Comprueba si un predicado es público en la sesión del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.prepend, this);">pl.type.Thread.prototype.<b>prepend(states)</b></a> - Inserta al principio de la pila de puntos de elección del hilo una lista de estados.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.success, this);">pl.type.Thread.prototype.<b>success(point)</b></a> - Añade al principio de la pila de puntos de elección del hilo el punto donde el átomo seleccionado es eliminado.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.throw_error, this);">pl.type.Thread.prototype.<b>throw_error(error)</b></a> - Lanza un error en el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.step, this);">pl.type.Thread.prototype.<b>step()</b></a> - Ejecuta un paso de resolución en el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.answer, this);">pl.type.Thread.prototype.<b>answer(callback)</b></a> - Busca una respuesta en el hilo. Ejecuta el callback con la respuesta encontrada. Si se supera el número de pasos de resolución permitidos, ejecuta el callback con el valor <span class="inline-code">null</span>. Si no se encuentra ninguna respuesta, ejecuta el callback con el valor <span class="inline-code">false</span>.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.answers, this);">pl.type.Thread.prototype.<b>answers(callback, max)</b></a> - Busca todas las respuestas en el hilo (hasta un máximo).</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.again, this);">pl.type.Thread.prototype.<b>again()</b></a> - Sigue buscando una respuesta en el hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.get_char_conversion, this);">pl.type.Thread.prototype.<b>get_char_conversion(char)</b></a> - Devuelve el carácter correspondiente al carácter <span class="inline-code">char</span> establecido por la directiva <span class="inline-code">char_conversion</span> en la sesión del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.get_flag, this);">pl.type.Thread.prototype.<b>get_flag(flag)</b></a> - Devuelve el valor del flag <span class="inline-code">flag</span> en la sesión del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.parse, this);">pl.type.Thread.prototype.<b>parse(string)</b></a> - Analiza la cadena de caracteres <span class="inline-code">string</span> y devuelve un objeto con la expresión analizada <span class="inline-code">expr</span> y los tokens <span class="inline-code">tokens</span> generados durante el análisis léxico.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.step_rule, this);">pl.type.Thread.prototype.<b>step_rule(module, atom)</b></a> - Si <span class="inline-code">module</span> es distinto de <span class="inline-code">null</span>, devuelve las cláusulas del predicado exportado por el módulo <span class="inline-code">module</span> especificado por el indicador del átomo <span class="inline-code">atom</span>. Si <span class="inline-code">module</span> es <span class="inline-code">null</span>, busca en los predicados definidos por el usuario, y en cada uno de los módulo importados hasta encontrar uno que lo defina, y devuelve sus cláusulas.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.__get_max_priority, this);">pl.type.Thread.prototype.<b>__get_max_priority()</b></a> - Devuelve la prioridad máxima de un operador en la sesión del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.__get_next_priority, this);">pl.type.Thread.prototype.<b>__get_next_priority(priority)</b></a> - Devuelve la mayor prioridad menor a <span class="inline-code">priority</span> que tiene algún operador en la sesión del hilo.</li>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Thread.prototype.__lookup_operator_classes, this);">pl.type.Thread.prototype.<b>__lookup_operator_classes(priority, op)</b></a> - Devuelve la clase del operador <span class="inline-code">op</span> en el nivel de prioridad <span class="inline-code">priority</span> en la sesión del hilo (<span class="inline-code">xfx</span>, <span class="inline-code">xfy</span>, <span class="inline-code">yfx</span>, <span class="inline-code">fy</span>, etcétera). Si el operador no existe en ese nivel de prioridad, devuelve <span class="inline-code">false</span>.</li>
		</ul>

		<h2 id="modules" class="mt-5"><a href="#modules">Módulos</a></h2>
		<p>El prototipo <span class="inline-code">pl.type.Module</span> se utiliza para representar módulos de Prolog. El constructor recibe como argumentos una cadena de carácteres que representa el identificador del módulo y un objeto que contiene las reglas del mismo. Este objeto tiene como índices el indicador de las reglas, y como valores las listas de reglas.</p>
		
		<ul>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Module, this);"><b>pl.type.Module</b></a>
			<li><a role="button" tabindex="0" onClick="show_prototype(pl.type.Module.prototype.exports_predicate, this);">pl.type.Module.prototype.<b>exports_predicate(indicator)</b></a> - Comprueba si el módulo exporta el predicado con indicador <span class="inline-code">indicator</span>.</li>
		</ul>
		
		<h2 id="errores" class="mt-5"><a href="#errores">Errores</a></h2>
		<p>ISO Prolog proporciona un mecanismo de manejo de excepciones, basado en las construcciones de control incorporadas <a href="http://tau-prolog.org/documentation/prolog/builtin/catch/3">catch/3</a> y <a href="http://tau-prolog.org/documentation/prolog/builtin/throw/1">throw/1</a>. Cuando ocurre un error, el objetivo actual es reemplazado por un objetivo de la forma <span class="inline-code">throw(error(Error_term, Implementation_defined_term))</span>. Si el error no es tratado, se obtiene como respuesta el error contenido como parámetro del término <span class="inline-code">throw/1</span>.</p>
		
	</div>
</div>
